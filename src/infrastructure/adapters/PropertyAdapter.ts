import { Property as DomainProperty } from '../../domain/entities/Property'
import { Property as StoreProperty } from '../../store/property-store'

export class PropertyAdapter {
  static toDomain(storeProperty: StoreProperty): DomainProperty {
    return new DomainProperty(
      String(storeProperty.id),
      storeProperty.title || '',
      storeProperty.price,
      storeProperty.location || '',
      storeProperty.rooms,
      storeProperty.bathrooms,
      storeProperty.floor || '',
      storeProperty.url,
      storeProperty.propertyType || 'vivienda',
      storeProperty.squareMeters,
      storeProperty.elevator,
      storeProperty.parking,
      storeProperty.terrace,
      storeProperty.balcony,
      storeProperty.airConditioning,
      storeProperty.heating,
      storeProperty.imageUrl,
      storeProperty.score || 0,
      storeProperty.notes,
      storeProperty.createdAt ? new Date(storeProperty.createdAt) : new Date(),
      storeProperty.updatedAt ? new Date(storeProperty.updatedAt) : new Date(),
      storeProperty.contactStatus || 'pending',
      storeProperty.propertyStatus || 'available',
      storeProperty.priority || 'medium',
      (storeProperty.visits || []).map((v: any) => ({ ...v, date: new Date(v.date) })),
      (storeProperty.contacts || []).map((c: any) => ({ ...c, date: new Date(c.date) })),
      storeProperty.visitNotes,
      storeProperty.lastContactDate ? new Date(storeProperty.lastContactDate) : undefined,
      storeProperty.nextFollowUpDate ? new Date(storeProperty.nextFollowUpDate) : undefined,
      storeProperty.phone,
      storeProperty.professional,
      storeProperty.contactPerson,
      storeProperty.energyCert,
      storeProperty.furnished,
      storeProperty.seasonal,
      storeProperty.desk,
      storeProperty.orientation,
      storeProperty.pricePerM2,
      storeProperty.deposit,
      storeProperty.energy,
      storeProperty.maintenance,
      storeProperty.garden,
      storeProperty.pool,
      storeProperty.accessible,
      storeProperty.cleaningIncluded,
      storeProperty.lgbtFriendly,
      storeProperty.ownerNotPresent,
      storeProperty.privateBathroom,
      storeProperty.window,
      storeProperty.couplesAllowed,
      storeProperty.minorsAllowed,
      storeProperty.publicationDate,
      storeProperty.builtInWardrobes,
      storeProperty.garage,
      storeProperty.storage,
      storeProperty.condition,
      storeProperty.propertySubType,
      storeProperty.hasFloorPlan,
      storeProperty.hasVirtualTour,
      storeProperty.bankAd,
      storeProperty.gender,
      storeProperty.smokers,
      storeProperty.bed,
      storeProperty.roommates
    )
  }

  static toStore(domainProperty: DomainProperty): StoreProperty {
    return {
      id: domainProperty.id,
      title: domainProperty.title,
      price: domainProperty.price,
      location: domainProperty.location,
      rooms: domainProperty.rooms,
      bathrooms: domainProperty.bathrooms,
      floor: domainProperty.floor,
      url: domainProperty.url,
      propertyType: domainProperty.propertyType,
      squareMeters: domainProperty.squareMeters,
      elevator: domainProperty.elevator,
      parking: domainProperty.parking,
      terrace: domainProperty.terrace,
      balcony: domainProperty.balcony,
      airConditioning: domainProperty.airConditioning,
      heating: domainProperty.heating,
      imageUrl: domainProperty.imageUrl,
      score: domainProperty.score,
      notes: domainProperty.notes,
      createdAt: domainProperty.createdAt,
      updatedAt: domainProperty.updatedAt,
      contactStatus: domainProperty.contactStatus,
      propertyStatus: domainProperty.propertyStatus,
      priority: domainProperty.priority,
      visits: domainProperty.visits,
      contacts: domainProperty.contacts,
      visitNotes: domainProperty.visitNotes,
      lastContactDate: domainProperty.lastContactDate,
      nextFollowUpDate: domainProperty.nextFollowUpDate,
      phone: domainProperty.phone,
      professional: domainProperty.professional,
      contactPerson: domainProperty.contactPerson,
      energyCert: domainProperty.energyCert,
      furnished: domainProperty.furnished,
      seasonal: domainProperty.seasonal,
      desk: domainProperty.desk,
      orientation: domainProperty.orientation,
      pricePerM2: domainProperty.pricePerM2,
      deposit: domainProperty.deposit,
      energy: domainProperty.energy,
      maintenance: domainProperty.maintenance,
      garden: domainProperty.garden,
      pool: domainProperty.pool,
      accessible: domainProperty.accessible,
      cleaningIncluded: domainProperty.cleaningIncluded,
      lgbtFriendly: domainProperty.lgbtFriendly,
      ownerNotPresent: domainProperty.ownerNotPresent,
      privateBathroom: domainProperty.privateBathroom,
      window: domainProperty.window,
      couplesAllowed: domainProperty.couplesAllowed,
      minorsAllowed: domainProperty.minorsAllowed,
      publicationDate: domainProperty.publicationDate,
      builtInWardrobes: domainProperty.builtInWardrobes,
      garage: domainProperty.garage,
      storage: domainProperty.storage,
      condition: domainProperty.condition,
      propertySubType: domainProperty.propertySubType,
      hasFloorPlan: domainProperty.hasFloorPlan,
      hasVirtualTour: domainProperty.hasVirtualTour,
      bankAd: domainProperty.bankAd,
      gender: domainProperty.gender,
      smokers: domainProperty.smokers,
      bed: domainProperty.bed,
      roommates: domainProperty.roommates
    } as StoreProperty
  }
}
